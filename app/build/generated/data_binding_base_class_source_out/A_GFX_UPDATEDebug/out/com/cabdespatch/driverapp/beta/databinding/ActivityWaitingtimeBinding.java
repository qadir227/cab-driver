// Generated by view binder compiler. Do not edit!
package com.cabdespatch.driverapp.beta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cabdespatch.driverapp.beta.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWaitingtimeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout frmWaitingTimeBase;

  @NonNull
  public final ImageButton frmWaitingTimeBtnAdd;

  @NonNull
  public final ImageButton frmWaitingTimeBtnCancel;

  @NonNull
  public final TextView frmWaitingTimeLblAdd;

  @NonNull
  public final TextView frmWaitingTimeLblCancel;

  @NonNull
  public final TextView frmWaitingTimeLblCurrentAllocation;

  @NonNull
  public final TextView frmWaitingTimeLblTimeElapsed;

  @NonNull
  public final TextView frmWaitingTimeLblTitle;

  private ActivityWaitingtimeBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout frmWaitingTimeBase, @NonNull ImageButton frmWaitingTimeBtnAdd,
      @NonNull ImageButton frmWaitingTimeBtnCancel, @NonNull TextView frmWaitingTimeLblAdd,
      @NonNull TextView frmWaitingTimeLblCancel,
      @NonNull TextView frmWaitingTimeLblCurrentAllocation,
      @NonNull TextView frmWaitingTimeLblTimeElapsed, @NonNull TextView frmWaitingTimeLblTitle) {
    this.rootView = rootView;
    this.frmWaitingTimeBase = frmWaitingTimeBase;
    this.frmWaitingTimeBtnAdd = frmWaitingTimeBtnAdd;
    this.frmWaitingTimeBtnCancel = frmWaitingTimeBtnCancel;
    this.frmWaitingTimeLblAdd = frmWaitingTimeLblAdd;
    this.frmWaitingTimeLblCancel = frmWaitingTimeLblCancel;
    this.frmWaitingTimeLblCurrentAllocation = frmWaitingTimeLblCurrentAllocation;
    this.frmWaitingTimeLblTimeElapsed = frmWaitingTimeLblTimeElapsed;
    this.frmWaitingTimeLblTitle = frmWaitingTimeLblTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWaitingtimeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWaitingtimeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_waitingtime, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWaitingtimeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout frmWaitingTimeBase = (LinearLayout) rootView;

      id = R.id.frmWaitingTime_btnAdd;
      ImageButton frmWaitingTimeBtnAdd = ViewBindings.findChildViewById(rootView, id);
      if (frmWaitingTimeBtnAdd == null) {
        break missingId;
      }

      id = R.id.frmWaitingTime_btnCancel;
      ImageButton frmWaitingTimeBtnCancel = ViewBindings.findChildViewById(rootView, id);
      if (frmWaitingTimeBtnCancel == null) {
        break missingId;
      }

      id = R.id.frmWaitingTime_lblAdd;
      TextView frmWaitingTimeLblAdd = ViewBindings.findChildViewById(rootView, id);
      if (frmWaitingTimeLblAdd == null) {
        break missingId;
      }

      id = R.id.frmWaitingTime_lblCancel;
      TextView frmWaitingTimeLblCancel = ViewBindings.findChildViewById(rootView, id);
      if (frmWaitingTimeLblCancel == null) {
        break missingId;
      }

      id = R.id.frmWaitingTime_lblCurrentAllocation;
      TextView frmWaitingTimeLblCurrentAllocation = ViewBindings.findChildViewById(rootView, id);
      if (frmWaitingTimeLblCurrentAllocation == null) {
        break missingId;
      }

      id = R.id.frmWaitingTime_lblTimeElapsed;
      TextView frmWaitingTimeLblTimeElapsed = ViewBindings.findChildViewById(rootView, id);
      if (frmWaitingTimeLblTimeElapsed == null) {
        break missingId;
      }

      id = R.id.frmWaitingTime_lblTitle;
      TextView frmWaitingTimeLblTitle = ViewBindings.findChildViewById(rootView, id);
      if (frmWaitingTimeLblTitle == null) {
        break missingId;
      }

      return new ActivityWaitingtimeBinding((LinearLayout) rootView, frmWaitingTimeBase,
          frmWaitingTimeBtnAdd, frmWaitingTimeBtnCancel, frmWaitingTimeLblAdd,
          frmWaitingTimeLblCancel, frmWaitingTimeLblCurrentAllocation, frmWaitingTimeLblTimeElapsed,
          frmWaitingTimeLblTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
