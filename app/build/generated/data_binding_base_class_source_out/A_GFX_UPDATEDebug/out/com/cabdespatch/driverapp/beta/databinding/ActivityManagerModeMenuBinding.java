// Generated by view binder compiler. Do not edit!
package com.cabdespatch.driverapp.beta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cabdespatch.driverapp.beta.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityManagerModeMenuBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final CheckBox managerModeChkAlternativeLocationProviders;

  @NonNull
  public final CheckBox managerModeChkEnforceMovementAmountLimits;

  @NonNull
  public final CheckBox managerModeChkFairMeter;

  @NonNull
  public final CheckBox managerModeChkFlightHack;

  @NonNull
  public final CheckBox managerModeChkRequireGps;

  @NonNull
  public final CheckBox managerModeChkRequireMobileData;

  @NonNull
  public final CheckBox managerModeChkSignalR;

  private ActivityManagerModeMenuBinding(@NonNull RelativeLayout rootView,
      @NonNull CheckBox managerModeChkAlternativeLocationProviders,
      @NonNull CheckBox managerModeChkEnforceMovementAmountLimits,
      @NonNull CheckBox managerModeChkFairMeter, @NonNull CheckBox managerModeChkFlightHack,
      @NonNull CheckBox managerModeChkRequireGps, @NonNull CheckBox managerModeChkRequireMobileData,
      @NonNull CheckBox managerModeChkSignalR) {
    this.rootView = rootView;
    this.managerModeChkAlternativeLocationProviders = managerModeChkAlternativeLocationProviders;
    this.managerModeChkEnforceMovementAmountLimits = managerModeChkEnforceMovementAmountLimits;
    this.managerModeChkFairMeter = managerModeChkFairMeter;
    this.managerModeChkFlightHack = managerModeChkFlightHack;
    this.managerModeChkRequireGps = managerModeChkRequireGps;
    this.managerModeChkRequireMobileData = managerModeChkRequireMobileData;
    this.managerModeChkSignalR = managerModeChkSignalR;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityManagerModeMenuBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityManagerModeMenuBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_manager_mode_menu, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityManagerModeMenuBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.managerMode_chkAlternativeLocationProviders;
      CheckBox managerModeChkAlternativeLocationProviders = ViewBindings.findChildViewById(rootView, id);
      if (managerModeChkAlternativeLocationProviders == null) {
        break missingId;
      }

      id = R.id.managerMode_chkEnforceMovementAmountLimits;
      CheckBox managerModeChkEnforceMovementAmountLimits = ViewBindings.findChildViewById(rootView, id);
      if (managerModeChkEnforceMovementAmountLimits == null) {
        break missingId;
      }

      id = R.id.managerMode_chkFairMeter;
      CheckBox managerModeChkFairMeter = ViewBindings.findChildViewById(rootView, id);
      if (managerModeChkFairMeter == null) {
        break missingId;
      }

      id = R.id.managerMode_chkFlightHack;
      CheckBox managerModeChkFlightHack = ViewBindings.findChildViewById(rootView, id);
      if (managerModeChkFlightHack == null) {
        break missingId;
      }

      id = R.id.managerMode_chkRequireGps;
      CheckBox managerModeChkRequireGps = ViewBindings.findChildViewById(rootView, id);
      if (managerModeChkRequireGps == null) {
        break missingId;
      }

      id = R.id.managerMode_chkRequireMobileData;
      CheckBox managerModeChkRequireMobileData = ViewBindings.findChildViewById(rootView, id);
      if (managerModeChkRequireMobileData == null) {
        break missingId;
      }

      id = R.id.managerMode_chkSignalR;
      CheckBox managerModeChkSignalR = ViewBindings.findChildViewById(rootView, id);
      if (managerModeChkSignalR == null) {
        break missingId;
      }

      return new ActivityManagerModeMenuBinding((RelativeLayout) rootView,
          managerModeChkAlternativeLocationProviders, managerModeChkEnforceMovementAmountLimits,
          managerModeChkFairMeter, managerModeChkFlightHack, managerModeChkRequireGps,
          managerModeChkRequireMobileData, managerModeChkSignalR);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
